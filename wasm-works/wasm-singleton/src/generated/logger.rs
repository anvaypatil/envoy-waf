// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/logger.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:logger.BinaryWrapper)
pub struct BinaryWrapper {
    // message fields
    // @@protoc_insertion_point(field:logger.BinaryWrapper.byteVector)
    pub byteVector: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:logger.BinaryWrapper.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BinaryWrapper {
    fn default() -> &'a BinaryWrapper {
        <BinaryWrapper as ::protobuf::Message>::default_instance()
    }
}

impl BinaryWrapper {
    pub fn new() -> BinaryWrapper {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "byteVector",
            |m: &BinaryWrapper| { &m.byteVector },
            |m: &mut BinaryWrapper| { &mut m.byteVector },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BinaryWrapper>(
            "BinaryWrapper",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BinaryWrapper {
    const NAME: &'static str = "BinaryWrapper";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.byteVector = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.byteVector.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.byteVector);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.byteVector.is_empty() {
            os.write_bytes(1, &self.byteVector)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BinaryWrapper {
        BinaryWrapper::new()
    }

    fn clear(&mut self) {
        self.byteVector.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BinaryWrapper {
        static instance: BinaryWrapper = BinaryWrapper {
            byteVector: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BinaryWrapper {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BinaryWrapper").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BinaryWrapper {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BinaryWrapper {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:logger.LogAck)
pub struct LogAck {
    // message fields
    // @@protoc_insertion_point(field:logger.LogAck.ack)
    pub ack: bool,
    // special fields
    // @@protoc_insertion_point(special_field:logger.LogAck.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LogAck {
    fn default() -> &'a LogAck {
        <LogAck as ::protobuf::Message>::default_instance()
    }
}

impl LogAck {
    pub fn new() -> LogAck {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ack",
            |m: &LogAck| { &m.ack },
            |m: &mut LogAck| { &mut m.ack },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LogAck>(
            "LogAck",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LogAck {
    const NAME: &'static str = "LogAck";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ack = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ack != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ack != false {
            os.write_bool(1, self.ack)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LogAck {
        LogAck::new()
    }

    fn clear(&mut self) {
        self.ack = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LogAck {
        static instance: LogAck = LogAck {
            ack: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LogAck {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LogAck").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LogAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogAck {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12proto/logger.proto\x12\x06logger\"/\n\rBinaryWrapper\x12\x1e\n\nby\
    teVector\x18\x01\x20\x01(\x0cR\nbyteVector\"\x1a\n\x06LogAck\x12\x10\n\
    \x03ack\x18\x01\x20\x01(\x08R\x03ack28\n\x06Logger\x12.\n\x03log\x12\x15\
    .logger.BinaryWrapper\x1a\x0e.logger.LogAck\"\0BE\n\x19io.grpc.proxy.was\
    m.loggerB\x0bLoggerProtoP\x01Z\x19io.grpc/proxy-wasm/loggerJ\x9e\x05\n\
    \x06\x12\x04\0\0\x1e\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x08\
    \x12\x03\x02\00\n\t\n\x02\x08\x0b\x12\x03\x02\00\n\x08\n\x01\x08\x12\x03\
    \x03\0\"\n\t\n\x02\x08\n\x12\x03\x03\0\"\n\x08\n\x01\x08\x12\x03\x04\02\
    \n\t\n\x02\x08\x01\x12\x03\x04\02\n\x08\n\x01\x08\x12\x03\x05\0,\n\t\n\
    \x02\x08\x08\x12\x03\x05\0,\n\x08\n\x01\x02\x12\x03\x07\0\x0f\n\n\n\x02\
    \x06\0\x12\x04\t\0\x0b\x01\n\n\n\x03\x06\0\x01\x12\x03\t\x08\x0e\n\x0b\n\
    \x04\x06\0\x02\0\x12\x03\n\x02-\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\n\
    \x06\t\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\n\x0b\x18\n\x0c\n\x05\x06\0\
    \x02\0\x03\x12\x03\n#)\n\xca\x02\n\x02\x04\0\x12\x04\x18\0\x1a\x012\xbd\
    \x02**\n#[derive(Encode,\x20Decode,\x20PartialEq,\x20Debug)]\nstruct\x20\
    HttpCall\x20{\nrequest_header:\x20Option<Vec<(String,\x20String)>>,\nreq\
    uest_body:\x20Option<Bytes>,\nresponse_header:\x20Option<Vec<(String,\
    \x20String)>>,\nresponse_body:\x20Option<Bytes>,\n}\nsince\x20there\x20a\
    re\x20complication\x20we\x20will\x20use\x20`bincode`\x20to\x20encode\x20\
    and\x20pass\x20to\x20grpc\x20and\x20decode\x20there.\n\n\n\n\x03\x04\0\
    \x01\x12\x03\x18\x08\x15\n\x0b\n\x04\x04\0\x02\0\x12\x03\x19\x02\x17\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x19\x02\x07\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x19\x08\x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x19\x15\x16\
    \n\n\n\x02\x04\x01\x12\x04\x1c\0\x1e\x01\n\n\n\x03\x04\x01\x01\x12\x03\
    \x1c\x08\x0e\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x1d\x02\x0f\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03\x1d\x02\x06\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\x1d\x07\n\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1d\r\x0eb\x06proto\
    3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(BinaryWrapper::generated_message_descriptor_data());
            messages.push(LogAck::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
